// <auto-generated />
using Back_End.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Back_End.Migrations
{
    [DbContext(typeof(Data))]
    partial class DataModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Back_End.Models.Path", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("route")
                        .HasColumnType("int");

                    b.Property<string>("stops")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trips")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typeOfDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typeOfRoute")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Paths");

                    b.HasData(
                        new
                        {
                            id = 1,
                            direction = "North",
                            route = 42,
                            stops = "['stop 1']",
                            trips = "[['9:55am']]",
                            typeOfDay = "Weekday",
                            typeOfRoute = "BRT-Express"
                        });
                });

            modelBuilder.Entity("Back_End.Models.Route", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            number = 40,
                            type = "BART EXPRESS"
                        });
                });

            modelBuilder.Entity("Back_End.Models.UserInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            password = "password",
                            username = "huegogh"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
